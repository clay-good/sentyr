"""Init command implementation."""

import shutil
from pathlib import Path

import click
from rich.console import Console
from rich.panel import Panel
from rich.prompt import Prompt, Confirm

console = Console()


def init_command(ctx: click.Context, oauth: bool, force: bool) -> None:
    """Initialize Sentyr configuration."""
    config_path = ctx.obj.get("config_path", Path("config.yaml"))

    # Check if config already exists
    if config_path.exists() and not force:
        console.print(f"[yellow]Configuration file already exists: {config_path}[/yellow]")
        if not Confirm.ask("Overwrite existing configuration?"):
            console.print("[cyan]Initialization cancelled[/cyan]")
            return

    console.print(
        Panel(
            "[bold cyan]Sentyr Configuration Setup[/bold cyan]\n\n"
            "This wizard will help you create a configuration file.",
            border_style="cyan",
        )
    )

    # Gather configuration
    domain = Prompt.ask("Enter your Google Workspace domain", default="example.com")

    if oauth:
        console.print("\n[cyan]OAuth 2.0 Configuration[/cyan]")
        oauth_file = Prompt.ask(
            "Path to OAuth credentials JSON file",
            default="oauth-credentials.json",
        )
        credentials_config = f'  oauth_credentials: "{oauth_file}"'
        impersonate_config = ""
    else:
        console.print("\n[cyan]Service Account Configuration[/cyan]")
        sa_file = Prompt.ask(
            "Path to service account JSON file",
            default="service-account.json",
        )
        admin_email = Prompt.ask(
            "Admin email to impersonate",
            default=f"admin@{domain}",
        )
        credentials_config = f'  credentials_file: "{sa_file}"'
        impersonate_config = f'  impersonate_user: "{admin_email}"'

    # Email configuration
    console.print("\n[cyan]Email Alert Configuration[/cyan]")
    enable_email = Confirm.ask("Enable email alerts?", default=True)

    if enable_email:
        smtp_host = Prompt.ask("SMTP host", default="smtp.gmail.com")
        smtp_port = Prompt.ask("SMTP port", default="587")
        smtp_user = Prompt.ask("SMTP username", default=f"alerts@{domain}")
        recipients = Prompt.ask(
            "Alert recipients (comma-separated)",
            default=f"security@{domain}",
        )

        email_config = f"""  email:
    enabled: true
    smtp_host: "{smtp_host}"
    smtp_port: {smtp_port}
    smtp_use_tls: true
    smtp_user: "{smtp_user}"
    smtp_password: "${{SMTP_PASSWORD}}"
    from_address: "{smtp_user}"
    recipients:
{chr(10).join(f'      - "{r.strip()}"' for r in recipients.split(','))}"""
    else:
        email_config = """  email:
    enabled: false"""

    # Create configuration content
    config_content = f"""# Sentyr Configuration
# Generated by: sentyr init

# Google Workspace Configuration
google_workspace:
  domain: "{domain}"
{credentials_config}
{impersonate_config}

# Scanning Configuration
scanning:
  scan_my_drive: true
  scan_shared_drives: true
  external_only: false
  public_only: false
  check_pii: true
  pii_patterns:
    - ssn
    - credit_card
    - phone
    - email
    - bank_account
    - routing_number
  scan_file_content: true
  max_file_size_mb: 10
  batch_size: 100
  rate_limit_delay: 0.1

# Alerting Configuration
alerts:
{email_config}

# Reporting Configuration
reporting:
  output_dir: "./reports"
  formats:
    - csv
    - json
  risk_thresholds:
    high: 75
    medium: 50
    low: 25
  auto_export_after_scan: true

# Storage Configuration
storage:
  database_path: "./sentyr.db"
  retention_days: 90

# Logging Configuration
logging:
  level: "INFO"
  format: "json"
  output: "file"
  log_file: "./logs/sentyr.log"
"""

    # Write configuration file
    config_path.parent.mkdir(parents=True, exist_ok=True)
    with open(config_path, "w") as f:
        f.write(config_content)

    console.print(f"\n[green]✓[/green] Configuration file created: {config_path}")

    # Create necessary directories
    Path("reports").mkdir(exist_ok=True)
    Path("logs").mkdir(exist_ok=True)

    console.print("[green]✓[/green] Created reports/ directory")
    console.print("[green]✓[/green] Created logs/ directory")

    # Show next steps
    console.print(
        Panel(
            "[bold green]Setup Complete![/bold green]\n\n"
            "Next steps:\n"
            f"1. {'Place your OAuth credentials file' if oauth else 'Place your service account JSON file'}\n"
            "2. Set environment variables (e.g., SMTP_PASSWORD)\n"
            "3. Test your configuration: [cyan]sentyr test[/cyan]\n"
            "4. Run your first scan: [cyan]sentyr scan files[/cyan]",
            title="Next Steps",
            border_style="green",
        )
    )

