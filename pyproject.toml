[tool.poetry]
name = "sentyr"
version = "0.1.0"
description = "Open-source Google Workspace security, compliance, and lifecycle management CLI tool"
authors = ["Your Name <your.email@example.com>"]
license = "MIT"
readme = "README.md"
homepage = "https://github.com/clay-good/sentyr"
repository = "https://github.com/clay-good/sentyr"
keywords = ["google-workspace", "security", "compliance", "dlp", "pii-detection"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: System Administrators",
    "Intended Audience :: Information Technology",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Security",
    "Topic :: System :: Monitoring",
]

[tool.poetry.dependencies]
python = "^3.9"
click = "^8.1.7"
google-api-python-client = "^2.108.0"
google-auth = "^2.25.2"
google-auth-oauthlib = "^1.2.0"
google-auth-httplib2 = "^0.2.0"
pyyaml = "^6.0.1"
structlog = "^23.2.0"
rich = "^13.7.0"
tabulate = "^0.9.0"
python-dateutil = "^2.8.2"
requests = "^2.31.0"
psutil = "^5.9.6"
apscheduler = "^3.10.4"
jinja2 = "^3.1.2"
# Document parsing libraries
pypdf = "^4.0.0"
python-docx = "^1.1.0"
openpyxl = "^3.1.2"
python-pptx = "^0.6.23"

[tool.poetry.group.dev.dependencies]
pytest = "^7.4.3"
pytest-cov = "^4.1.0"
pytest-mock = "^3.12.0"
black = "^23.12.1"
ruff = "^0.1.9"
mypy = "^1.7.1"
pre-commit = "^3.6.0"
types-pyyaml = "^6.0.12.12"
types-requests = "^2.31.0.10"
types-tabulate = "^0.9.0.3"

[tool.poetry.scripts]
sentyr = "sentyr.cli.main:cli"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.black]
line-length = 100
target-version = ['py39', 'py310', 'py311', 'py312']
include = '\.pyi?$'
exclude = '''
/(
    \.git
  | \.venv
  | \.pytest_cache
  | __pycache__
  | build
  | dist
)/
'''

[tool.ruff]
line-length = 100
target-version = "py39"
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
]
ignore = [
    "E501",  # line too long (handled by black)
    "B008",  # do not perform function calls in argument defaults
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
strict_equality = true

[[tool.mypy.overrides]]
module = "googleapiclient.*"
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --cov=sentyr --cov-report=term-missing --cov-report=html"
testpaths = ["tests"]
pythonpath = ["."]

[tool.coverage.run]
source = ["sentyr"]
omit = ["*/tests/*", "*/__pycache__/*", "*/venv/*"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

